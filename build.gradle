/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/tutorial_java_projects.html
 */

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: 'build-dashboard'
apply plugin: 'findbugs'
apply plugin: 'pmd'

jar {
  baseName = 'unique-id'
  manifest {
    attributes   \
        'Implementation-Title' : project.name ,   \
        'Implementation-Version' : project.version ,   \
        'Built-By' : System.getProperty('user.name') ,   \
        'Built-JDK' : System.getProperty('java.version') ,   \
        'Build-Time' : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ") ,   \
        'Source-Compatibility' : project.sourceCompatibility ,   \
        'Target-Compatibility' : project.targetCompatibility
  }
  enabled = true
}
repositories {
  mavenLocal()
  maven { url "${nexusUrl}/repository/public" }
}

dependencies {
}

compileJava {
  options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Xlint:-serial" << "-Werror"
}
uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: "${nexusUrl}/repository/releases") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
      snapshotRepository(url: "${nexusUrl}/repository/snapshots") {
        authentication(userName: nexusUsername, password: nexusPassword)
      }
    }
  }
}

task showGradleRepo {
  doLast {
    configurations.compile.each { println it }
  }
}

findbugs {
  excludeFilter = file("findbugs-filter.xml")
  ignoreFailures = false
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/findbugs")
  effort = "max"
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

tasks.withType(Pmd) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

pmd {
//  toolVersion = dependencyManagement.importedProperties['pmd.version']
  ruleSetFiles = files("pmdruleset.xml")
  ignoreFailures = false
  consoleOutput = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
}
